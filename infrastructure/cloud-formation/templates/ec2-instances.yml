Description: >
  This template contains the EC2 instance on which we run our storage miner and
  client.

Parameters:
  AvailabilityZone:
    Description: Availability zone to deploy
    Type: AWS::EC2::AvailabilityZone::Name
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  KeyName:
    Description: AWS key pair name for connecting to EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
  LotusGitSHA:
    Description: Git SHA of lotus to build
    Type: String
  SecurityGroup:
    Description: Security group ID for EC2 instance network interfaces
    Type: AWS::EC2::SecurityGroup::Id
  Subnet:
    Description: Subnet ID for EC2 instance network interfaces
    Type: AWS::EC2::Subnet::Id
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the security groups should be deployed to

Resources:
  StorageMinerEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
#      AdditionalInfo: String
#      Affinity: String
      AvailabilityZone: !Ref AvailabilityZone
#      BlockDeviceMappings:
#        - BlockDeviceMapping
#      CpuOptions:
#        CpuOptions
#      CreditSpecification:
#        CreditSpecification
#      DisableApiTermination: Boolean
#      EbsOptimized: Boolean
#      ElasticGpuSpecifications:
#        - ElasticGpuSpecification
#      ElasticInferenceAccelerators:
#        - ElasticInferenceAccelerator
#      HibernationOptions:
#        HibernationOptions
#      HostId: String
#      HostResourceGroupArn: String
#      IamInstanceProfile: String
      # see: https://cloud-images.ubuntu.com/query/disco/server/released.current.txt
      ImageId: "ami-06a0ea768526e5631"
#      InstanceInitiatedShutdownBehavior: String
      InstanceType: "m4.xlarge"
#      Ipv6AddressCount: Integer
#      Ipv6Addresses:
#        - InstanceIpv6Address
#      KernelId: String
      KeyName: !Ref KeyName
#      LaunchTemplate:
#        LaunchTemplateSpecification
#      LicenseSpecifications:
#        - LicenseSpecification
#      Monitoring: Boolean
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref Subnet
          GroupSet:
            - !Ref SecurityGroup
#      PlacementGroupName: String
#      PrivateIpAddress: String
#      RamdiskId: String
#      SecurityGroupIds:
#        - String
#      SecurityGroups:
#        - String
#      SourceDestCheck: Boolean
#      SsmAssociations:
#        - SsmAssociation
#      SubnetId: String
#      Tags:
#        - Tag
#      Tenancy: String
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash

          set -x

          GO_VERSION=1.13.9

          # Install packages needed for libfilcrypto
          apt-get update && apt-get install -y --no-install-recommends \
            g++ \
            libc6-dev \
            ocl-icd-opencl-dev \
            jq \
            pkg-config \
            make && rm -rf /var/lib/apt/lists/*

          # Install Golang
          curl -sSL "https://golang.org/dl/go$GO_VERSION.linux-amd64.tar.gz" | tar -xz -C /usr/local/
          chown -R ubuntu:ubuntu /usr/local/go
          mkdir -p /home/ubuntu/go/bin
          export GOPATH=/home/ubuntu/go
          export PATH=$GOPATH/bin:/usr/local/go/bin:$PATH

          # Set GOPATH in .bashrc
          echo "export GOPATH=/home/ubuntu/go" >> /home/ubuntu/.bashrc
          echo "PATH=$PATH:/usr/local/go/bin:$GOPATH/bin" >> /home/ubuntu/.bashrc

          # All of these commands are run as root; set proper owner here
          chown -R ubuntu:ubuntu /home/ubuntu
          --//
#      Volumes:
#        - Volume
#
Outputs:
  StorageMinerEC2Instance:
    Description: Storage mining EC2 instance ID
    Value: !Ref StorageMinerEC2Instance
  StorageMinerEC2InstanceIP:
    Description: IP Address for storage mining EC2 instance
    Value: !GetAtt StorageMinerEC2Instance.PublicIp
